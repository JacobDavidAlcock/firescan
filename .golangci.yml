# golangci-lint configuration for FireScan
# https://golangci-lint.run/usage/configuration/

run:
  timeout: 5m
  tests: true
  modules-download-mode: readonly

linters:
  enable:
    # Default linters
    - errcheck # Check for unchecked errors
    - gosimple # Simplify code
    - govet # Vet examines Go source code
    - ineffassign # Detect ineffectual assignments
    - staticcheck # Go static analysis
    - unused # Check for unused code

    # Additional recommended linters
    - gofmt # Check code formatting
    - goimports # Check import formatting
    - misspell # Check for misspelled words
    - revive # Fast, configurable, extensible linter
    - gosec # Security problems
    - bodyclose # Check HTTP response body is closed
    - noctx # Check for sending HTTP request without context
    - unparam # Check for unused function parameters
    - unconvert # Remove unnecessary type conversions
    - goconst # Find repeated strings that could be constants
    - gocyclo # Check cyclomatic complexity
    - dupl # Check for duplicate code
    - gocritic # Comprehensive Go linter
    - prealloc # Find slice declarations that could be preallocated
    - copyloopvar # Check for loop variable copies (replaces exportloopref)
    - nilerr # Check for returning nil even if error is not nil

  disable:
    - typecheck # Can be slow and sometimes buggy

linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: false # Don't require checking blank assignments
    exclude-functions:
      - fmt.Println
      - fmt.Printf
      - fmt.Fprintf

  govet:
    enable-all: true
    disable:
      - shadow # Can be too strict
      - fieldalignment # Micro-optimization, not critical

  gocyclo:
    min-complexity: 15

  dupl:
    threshold: 100

  goconst:
    min-len: 3
    min-occurrences: 3

  misspell:
    locale: US

  revive:
    rules:
      - name: exported
        disabled: false
        arguments:
          - "disableStutteringCheck" # Allow names like appcheck.AppCheckResult
      - name: package-comments
        disabled: true # Not all packages need comments
      - name: unexported-return
        disabled: false

  gosec:
    excludes:
      - G104 # Audit errors not checked (covered by errcheck)
      - G304 # File path provided as taint input (we validate paths)
    config:
      G301: "0644" # Allow 0644 file permissions
      G302: "0600" # Allow 0600 file permissions

  staticcheck:
    checks: ["all"]

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - goconst

    # Exclude known issues in specific files
    - path: cmd/firescan/main.go
      linters:
        - errcheck # Main can ignore some errors

    # Exclude shadow checking on short variable names
    - text: 'shadow: declaration of "err"'
      linters:
        - govet

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:" # Empty branch

    # Allow unused parameters in test/utility functions
    - text: "is unused"
      linters:
        - unparam

    # Allow prealloc suggestions (performance micro-optimization)
    - text: "Consider pre-allocating"
      linters:
        - prealloc

    # Allow goconst suggestions (code clarity preference)
    - text: "occurrences, make it a constant"
      linters:
        - goconst

    # Allow some gosimple suggestions
    - text: "S1039: unnecessary use of fmt.Sprintf"
      linters:
        - gosimple

    # Allow cyclomatic complexity in UI/handler functions
    - path: internal/ui/
      linters:
        - gocyclo

    # Allow some errcheck in existing code (gradually fix)
    - path: internal/(auth|fcm|unauth)/
      linters:
        - errcheck

    # Allow noctx in existing code (gradually migrate to context)
    - path: internal/(auth|fcm|unauth)/
      linters:
        - noctx

    # Allow unused functions (may be used by external tools)
    - text: "is unused"
      linters:
        - unused

    # Allow gocritic ifElseChain suggestions (readability preference)
    - text: "ifElseChain: rewrite if-else to switch statement"
      linters:
        - gocritic

    # Allow G107 - Potential HTTP request with variable URL (we validate inputs)
    - text: "G107: Potential HTTP request made with variable url"
      linters:
        - gosec

    # Allow G301/G306 - Directory/file permissions (we use standard permissions)
    - text: "G301: Expect directory permissions"
      linters:
        - gosec
    - text: "G306: Expect WriteFile permissions"
      linters:
        - gosec

    # Allow misspelling of cancelled (both spellings are valid)
    - text: "cancelled.*misspelling.*canceled"
      linters:
        - misspell

    # Allow noctx in internal/httpclient (it's a wrapper)
    - path: internal/httpclient/
      linters:
        - noctx

    # Allow noctx in internal/rules (gradually migrate)
    - path: internal/rules/
      linters:
        - noctx

    # Allow noctx in internal/rtdb (gradually migrate)
    - path: internal/rtdb/
      linters:
        - noctx

    # Allow errcheck in internal/rules (defer cleanup functions)
    - path: internal/rules/
      linters:
        - errcheck

    # Allow errcheck in internal/logger (Init in defer)
    - path: internal/logger/
      linters:
        - errcheck

    # Allow high complexity in testAPIKeyRestrictions (complex business logic)
    - path: internal/management/management.go
      text: "testAPIKeyRestrictions"
      linters:
        - gocyclo

    # Allow high complexity in RunScan (main orchestration function)
    - path: internal/scanner/scanner.go
      text: "RunScan"
      linters:
        - gocyclo

    # Allow errcheck for user input (Scanln)
    - path: internal/safety/
      text: "fmt.Scanln"
      linters:
        - errcheck

    # Allow errcheck for flag parsing (errors handled by flag package)
    - path: internal/ui/commands.go
      text: "Parse.*is not checked"
      linters:
        - errcheck

    # Allow errcheck for JSON decode in scanner (best effort parsing)
    - path: internal/scanner/
      linters:
        - errcheck

    # Allow errcheck for cleanup functions in storage
    - path: internal/storage/
      text: "PerformCleanup.*is not checked"
      linters:
        - errcheck

    # Allow errcheck for Write operations (data already validated)
    - path: internal/storage/
      text: "fw.Write.*is not checked"
      linters:
        - errcheck

    # Allow noctx in internal/storage (gradually migrate)
    - path: internal/storage/
      linters:
        - noctx

    # Allow noctx in internal/services (gradually migrate)
    - path: internal/services/
      linters:
        - noctx

    # Allow gocritic elseif suggestions (readability preference)
    - text: "elseif: can replace 'else {if cond {}}"
      linters:
        - gocritic

  max-issues-per-linter: 0
  max-same-issues: 0
  new: false
  uniq-by-line: true

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  sort-results: true
